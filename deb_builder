#!/bin/bash

# Paket bilgileri
version="6.5-5"
pkgname="crypto-dashboard"
mkdir "deb_build"
build_dir="./deb_build/${pkgname}_deb_${version}"

# Mevcut yapı dizinini temizleyin
echo "Önceki yapı dizinleri temizleniyor..."
rm -rf "$build_dir"

# Dizin yapısını oluşturun
echo "Dizin yapısı oluşturuluyor..."
mkdir -p "${build_dir}/DEBIAN"
mkdir -p "${build_dir}/usr/bin"
mkdir -p "${build_dir}/usr/share/${pkgname}"
mkdir -p "${build_dir}/usr/share/applications"

# Gerekli dosyaları kopyalayın
echo "Dosyalar kopyalanıyor..."

# Dosya ve dizinlerin varlığını kontrol edin ve kopyalayın
for file in ./libs ./ui ./coindashboard ./coindashboard_trade ./coindashboard_lock_app ./icon.png ./icon.ico ./app.py ./trade.py ./lock_app.py ./requirements.txt ./coindashboard.desktop ./coindashboard_trade.desktop ./coindashboard_lock_app.desktop; do
    if [ -e "$file" ]; then
        cp -r "$file" "${build_dir}/usr/share/${pkgname}/$(basename $file)"
    else
        echo "Hata: $file bulunamadı."
        exit 1
    fi
done

# Binaries
cp ./coindashboard "${build_dir}/usr/bin/${pkgname}"
cp ./coindashboard_trade "${build_dir}/usr/bin/${pkgname}_trade"
cp ./coindashboard_lock_app "${build_dir}/usr/bin/${pkgname}_lock_app"

# Paket bilgileri (control) dosyasını oluşturun
cat > "${build_dir}/DEBIAN/control" <<EOL
Package: ${pkgname}
Version: ${version}
Section: utils
Priority: optional
Architecture: all
Maintainer: Fatih Yolcu <kilicsizoglu@gmail.com>
Depends: python3, python3-venv
Description: Crypto Dashboard Application
 A comprehensive dashboard for monitoring cryptocurrency markets.
 Provides real-time insights and analysis on crypto trends, helping users to make informed trading decisions.
EOL

# postinst dosyasını oluşturun
cat > "${build_dir}/DEBIAN/postinst" <<EOL
#!/bin/bash
set -e

# Betiğin çalıştığı dizinin yolunu al
DIR="\$(cd "\$(dirname "\$0")" && pwd)"

# Sanal ortam dizini
VENV_DIR="/usr/share/${pkgname}/${pkgname}-venv"

# Bağımlılıkları kontrol et ve yükle
if ! dpkg -l | grep -q python3-venv; then
    echo "python3-venv paketi yükleniyor..."
    apt-get update
    apt-get install -y python3-venv
fi

# Sanal ortam mevcut değilse oluştur
if [ ! -d "\$VENV_DIR" ]; then
    echo "Sanal ortam oluşturuluyor..."
    python3 -m venv "\$VENV_DIR"
    echo "Sanal ortam oluşturuldu."
fi

# Sanal ortamı etkinleştir
source "\$VENV_DIR/bin/activate"

# Gerekli bağımlılıkları yükle
echo "Bağımlılıklar yükleniyor..."
pip install -r "/usr/share/${pkgname}/requirements.txt"

echo "${pkgname} kurulum bağımlılıkları yüklendi."
EOL

# prerm dosyasını oluşturun (paket kaldırılırken yapılacak işlemler)
cat > "${build_dir}/DEBIAN/prerm" <<EOL
#!/bin/bash
set -e

echo "${pkgname} kaldırılıyor..."

# Sanal ortamı kaldır
VENV_DIR="/usr/share/${pkgname}/${pkgname}-venv"
if [ -d "\$VENV_DIR" ]; then
    echo "Sanal ortam kaldırılıyor..."
    rm -rf "\$VENV_DIR"
fi

# /usr/share/${pkgname} dizinini temizle
SHARE_DIR="/usr/share/${pkgname}"
if [ -d "\$SHARE_DIR" ]; then
    echo "\$SHARE_DIR dizini temizleniyor..."
    rm -rf "\$SHARE_DIR"/*
    rmdir "\$SHARE_DIR"
fi
EOL

# Yürütme izinleri ayarlayın
chmod 755 "${build_dir}/DEBIAN/postinst"
chmod 755 "${build_dir}/DEBIAN/prerm"

# .deb paketini oluşturun
echo ".deb paketi oluşturuluyor..."
dpkg-deb --build "${build_dir}" "${build_dir}/coindashboard.deb"

# Paket başarıyla oluşturulduğunda bilgilendirme yapın
echo "${pkgname} paketi başarıyla oluşturuldu: coindashboard.deb"

# Paketi yükleme komutunu ekleyin (isteğe bağlı)
echo "Paket yükleniyor..."
sudo dpkg -i "${build_dir}/coindashboard.deb"
